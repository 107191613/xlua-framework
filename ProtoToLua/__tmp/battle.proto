package battle;

import 'client_common.proto';

message one_cmd
{
	optional int32 cmd_id = 1[default = 0];
	optional uint32 UID = 2[default = 0];
	optional bytes cmd_data = 3[default = ""];
	optional int32 cmd_seq = 4[default = 0];
}

message one_character
{
	optional int32  id = 1[default = 0];   //角色id
	optional int32  hp = 2[default = 0];   //血量
	optional int32  pos_x = 3[default = 0];  //X轴位置
	optional int32  pos_z = 4[default = 0]; //Z轴位置
}

message one_player_info
{
	optional uint32        uid            = 1[default = 0];
	optional int32         coin           = 2[default = 0];  //矿产
	optional int32         base_hp        = 3[default = 0];
}

message one_card_info
{
	optional int32 id = 1[default = 0];
	optional int32 use_count = 2[default = 0]; //使用次数
}

message one_player_fight_info
{
	optional int32 uid = 1[default = 0];
	optional string name = 2[default = ''];//玩家名字
	optional string image = 3[default = ''];//玩家头像
	optional int32 maincityMaxLevel = 4[default = 0];//本场战斗自己主城达到的最大等级
	optional int32 killMaincityNum = 5[default = 0];//本场战斗击毁的主城数目
	optional int32 coin = 6[default = 0];//本场战斗获得的总水晶
	optional int32 hurt = 7[default = 0];//本场战斗给敌人造成的伤害
	repeated one_card_info card_list = 8;//卡牌信息
	optional int32 kingdom = 9; //种族信息 
}

message one_camp_info
{
	optional int32 camp = 1[default = 0];
	optional int32 score = 2[default = 0];//阵营积分
	optional int32 result = 3[default = 0];// 0-胜利，1-失败，2平局
	repeated one_player_fight_info player_list = 4;  	
}

message one_battle_result
{
	optional int32 result = 1[default = 0];   //1.无效战斗
	repeated one_camp_info camp_list = 2;  
	optional int32 game_time = 3[default = 0];
}

message one_report_game_info
{
	optional int32 frame = 1[default = 0];   //检测帧
	repeated one_player_info  player_list = 2;
	repeated one_character character_list = 3; 
	optional int32 last_rand = 4[default = 0]; //上一次的随机数
}

message req_send_cmd
{
	repeated one_cmd cmd_list = 1;
}

message rsp_send_cmd
{
	optional int32 result = 1[default = 0];
	optional int32 cmd_seq = 2[default = 0];  //当前收到的最大seq
	optional uint32 flag = 3[default = 0]; //标志收到了多少包
}

message ntf_battle_frame_data
{
	message cmd_with_frame
	{
		optional int32 server_frame = 1[default = 0];
		optional one_cmd cmd = 2;
	}

	message one_slot
	{
		optional int32 slot = 1[default = 0];			
		repeated cmd_with_frame cmd_list = 3;
	}
	
	optional int32 time = 1[default = 0];						// 这一帧的时间
	repeated one_slot slot_list = 3;				// slot列表
	
	optional int32 server_from_slot = 5[default = 0];	
	optional int32 server_to_slot = 6[default = 0];
	
	optional int32 server_curr_frame = 7[default = 0];
	optional int32 is_check_frame = 8[default =0]; // 1 表示这帧需要检测
}

message req_ack_battle_frame_data
{
	optional int32 slot_recved = 1[default = 0];
}

message req_battle_frame_data
{
	optional int32 slot_recved = 1[default = 0];
}

message rsp_battle_frame_data
{
	optional int32 result = 1[default = 0];
	optional ntf_battle_frame_data frame_info = 2;
	optional int32 max_cmd_seq = 4[default = 0];
	optional int32 room_status = 5[default = 0];
}

/////////////////////

// 请求开始战斗
message req_start_battle
{
}

message rsp_start_battle
{
	optional int32 result = 1[default = 0];
}

message req_enter_room
{
	optional int64 battle_id = 1[default = 0];
	repeated int32 card_list = 2;
	optional int32 race = 3 [default = 0];
	optional int32 to_battle_trans_1 = 4[default = 0];
	optional int32 to_battle_trans_2 = 5[default = 0];
	optional int32 flag = 10 [default = 0];
	optional int32 start_frame = 11[default = 0];
	optional int32 region_id = 12[default =0];
}

message rsp_enter_room
{
	optional int32 result = 1[default = 0];
	optional client_common.ntf_battle_status battle_info = 2;
	optional ntf_battle_frame_data frame_info = 3;
	optional int32 max_cmd_seq = 4[default = 0];
	optional int32 room_status = 5[default = 0];
	optional int32 flag = 10 [default = 0];
	optional string gate_ip = 11[default =''];
	optional int32 gate_port =12[default =0];
}

message req_leave_room
{
}

message rsp_leave_room
{
	optional int32 result = 1[default = 0];
}

message req_report_battle_result
{
	optional bytes  result_data = 1[default =''];
	optional one_report_game_info game_info = 2;
}

message rsp_report_battle_result
{
	optional int32 result = 1[default = 0];
}

//message ntf_battle_result
//{
//	optional int32 result = 1[default = 0];
//	optional int32 camp = 2[default = 0];
//	optional int32 rank = 3[default = 0];
//	
//	// award todo
//}

message req_syn_udp
{
	optional uint32 UID = 1[default = 0];
}

message rsp_syn_udp
{
	optional int32 result = 1[default = 0];
}

message req_ping
{
	optional uint32 seq = 1[default = 0];
	optional uint32 sendTime = 2[default = 0];
}

message rsp_ping
{
	optional int32 result = 1[default = 0];
	optional uint32 seq = 2[default = 0];
	optional uint32 sendTime = 3[default = 0];
}

message req_report_game_info
{
	optional one_report_game_info game_info = 1;
}

message rsp_report_game_info
{
	optional int32 result = 1[default = 0];
}